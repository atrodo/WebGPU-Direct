{
  # Constants, by a name, are scalar refs, and are fixed up later
  ColorTargetState => {
    blend     => undef,
    writeMask => \'ColorWriteMask->All',
  },
  DepthStencilState => {
    depthBias           => 0,
    depthBiasClamp      => 0,
    depthBiasSlopeScale => 0,
    stencilReadMask     => 0xFFFFFFFF,
    stencilWriteMask    => 0xFFFFFFFF,
  },
  MultisampleState => {
    alphaToCoverageEnabled => 0,
    count                  => 1,
    mask                   => 0xFFFFFFFF,
  },
  RenderPipelineDescriptor => {},
  StencilFaceState         => {
    compare     => \'CompareFunction->Always',
    failOp      => \'StencilOperation->Keep',
    depthFailOp => \'StencilOperation->Keep',
    passOp      => \'StencilOperation->Keep',
  },
  SurfaceConfiguration => {
    alphaMode => \'CompositeAlphaMode->Auto',
    usage     => \'TextureUsage->RenderAttachment',
  },
  TextureDescriptor => {
    dimension     => \'TextureDimension->_2D',
    size          => { height => 1, depthOrArrayLayers => 1 },
    mipLevelCount => 1,
    sampleCount   => 1,
  },
  TextureViewDescriptor => {
    aspect         => \'TextureAspect->All',
    baseArrayLayer => 0,
    baseMipLevel   => 0,
  },

  # XS Function and function documentation of defaults
  Adapter =>
  {
    RequestDevice => {
      descriptor => 'undef',
      callback   => 'undef',
      userdata   => '{}',
    },
  },

  Buffer =>
  {
    GetMappedRange => {
      offset => 0,
      size   => 'GetSize() - offset',
    },
  },

  CommandEncoder =>
  {
    BeginComputePass => {
      descriptor => '{}',
    },
    Finish => {
      descriptor => '{}',
    },
  },

  ComputePassEncoder =>
  {
    DispatchWorkgroups => {
      workgroupCountY => 1,
      workgroupCountZ => 1,
    },
    SetBindGroup => {
      dynamicOffsets => '[]',
    },
  },

  Device =>
  {
    CreateShaderModule => {
      descriptor => '{}',
    },
    CreateCommandEncoder => {
      descriptor => '{}',
    },
  },

  Instance =>
  {
    RequestAdapter => {
      options  => 'undef',
      callback => 'undef',
      userdata => '{}',
    },
  },

  RenderPassEncoder =>
  {
    Draw => {
      instanceCount => 1,
      firstVertex   => 0,
      firstInstance => 0,
    },

    SetVertexBuffer => {
      offset => 0,
      size   => 'GetSize() - offset',
    },
  },

  Surface =>
  {
    GetCurrentTexture => {
      surfaceTexture => 'undef',
    },
  },

  Texture =>
  {
    CreateView => {
      descriptor => '{}',
    },
  },
}

# vim: syn=perl
